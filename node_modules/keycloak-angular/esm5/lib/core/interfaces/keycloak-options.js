export function ExcludedUrl() { }
if (false) {
    ExcludedUrl.prototype.url;
    ExcludedUrl.prototype.httpMethods;
}
export function ExcludedUrlRegex() { }
if (false) {
    ExcludedUrlRegex.prototype.urlPattern;
    ExcludedUrlRegex.prototype.httpMethods;
}
export function KeycloakOptions() { }
if (false) {
    KeycloakOptions.prototype.config;
    KeycloakOptions.prototype.initOptions;
    KeycloakOptions.prototype.enableBearerInterceptor;
    KeycloakOptions.prototype.loadUserProfileAtStartUp;
    KeycloakOptions.prototype.bearerExcludedUrls;
    KeycloakOptions.prototype.authorizationHeaderName;
    KeycloakOptions.prototype.bearerPrefix;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Y2xvYWstb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2tleWNsb2FrLWFuZ3VsYXIvIiwic291cmNlcyI6WyJsaWIvY29yZS9pbnRlcmZhY2VzL2tleWNsb2FrLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0NBLGlDQUdDOztJQUZDLDBCQUFZO0lBQ1osa0NBQTRCOztBQVE5QixzQ0FHQzs7SUFGQyxzQ0FBbUI7SUFDbkIsdUNBQTRCOztBQU05QixxQ0F3REM7O0lBL0NDLGlDQUFpQztJQUlqQyxzQ0FBMkM7SUFXM0Msa0RBQWtDO0lBU2xDLG1EQUFtQztJQU1uQyw2Q0FBOEM7SUFPOUMsa0RBQWlDO0lBU2pDLHVDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBNYXVyaWNpbyBHZW1lbGxpIFZpZ29sbyBhbmQgY29udHJpYnV0b3JzLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL21hdXJpY2lvdmlnb2xvL2tleWNsb2FrLWFuZ3VsYXIvTElDRU5TRVxuICovXG5cbmltcG9ydCB7IEtleWNsb2FrQ29uZmlnIH0gZnJvbSAnLi9rZXljbG9hay1jb25maWcnO1xuXG4vKipcbiAqIEhUVFAgTWV0aG9kc1xuICovXG5leHBvcnQgdHlwZSBIdHRwTWV0aG9kcyA9XG4gIHwgJ0dFVCdcbiAgfCAnUE9TVCdcbiAgfCAnUFVUJ1xuICB8ICdERUxFVEUnXG4gIHwgJ09QVElPTlMnXG4gIHwgJ0hFQUQnXG4gIHwgJ1BBVENIJztcblxuLyoqXG4gKiBFeGNsdWRlZFVybCB0eXBlIG1heSBiZSB1c2VkIHRvIHNwZWNpZnkgdGhlIHVybCBhbmQgdGhlIEhUVFAgbWV0aG9kIHRoYXRcbiAqIHNob3VsZCBub3QgYmUgaW50ZXJjZXB0ZWQgYnkgdGhlIEtleWNsb2FrQmVhcmVySW50ZXJjZXB0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqIGNvbnN0IGV4Y2x1ZGVkVXJsOiBFeGNsdWRlZFVybFtdID0gW1xuICogIHtcbiAqICAgIHVybDogJ3JlcG9ydHMvcHVibGljJ1xuICogICAgaHR0cE1ldGhvZHM6IFsnR0VUJ11cbiAqICB9XG4gKiBdXG4gKlxuICogSW4gdGhlIGV4YW1wbGUgYWJvdmUgZm9yIFVSTCByZXBvcnRzL3B1YmxpYyBhbmQgSFRUUCBNZXRob2QgR0VUIHRoZVxuICogYmVhcmVyIHdpbGwgbm90IGJlIGF1dG9tYXRpY2FsbHkgYWRkZWQuXG4gKlxuICogSWYgdGhlIHVybCBpcyBpbmZvcm1lZCBidXQgaHR0cE1ldGhvZCBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIGJlYXJlclxuICogd2lsbCBub3QgYmUgYWRkZWQgZm9yIGFsbCBIVFRQIE1ldGhvZHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXhjbHVkZWRVcmwge1xuICB1cmw6IHN0cmluZztcbiAgaHR0cE1ldGhvZHM/OiBIdHRwTWV0aG9kc1tdO1xufVxuXG4vKipcbiAqIFNpbWlsYXIgdG8gRXhjbHVkZWRVcmwsIGNvbnRhaW5zIHRoZSBIVFRQIG1ldGhvZHMgYW5kIGEgcmVnZXggdG9cbiAqIGluY2x1ZGUgdGhlIHVybCBwYXR0ZXJucy5cbiAqIFRoaXMgaW50ZXJmYWNlIGlzIHVzZWQgaW50ZXJuYWxseSBieSB0aGUgS2V5Y2xvYWtTZXJ2aWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4Y2x1ZGVkVXJsUmVnZXgge1xuICB1cmxQYXR0ZXJuOiBSZWdFeHA7XG4gIGh0dHBNZXRob2RzPzogSHR0cE1ldGhvZHNbXTtcbn1cblxuLyoqXG4gKiBrZXljbG9hay1hbmd1bGFyIGluaXRpYWxpemF0aW9uIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgS2V5Y2xvYWtPcHRpb25zIHtcbiAgLyoqXG4gICAqIENvbmZpZ3MgdG8gaW5pdCB0aGUga2V5Y2xvYWstanMgbGlicmFyeS4gSWYgdW5kZWZpbmVkLCB3aWxsIGxvb2sgZm9yIGEga2V5Y2xvYWsuanNvbiBmaWxlXG4gICAqIGF0IHJvb3Qgb2YgdGhlIHByb2plY3QuXG4gICAqIElmIG5vdCB1bmRlZmluZWQsIGNhbiBiZSBhIHN0cmluZyBtZWFuaW5nIHRoZSB1cmwgdG8gdGhlIGtleWNsb2FrLmpzb24gZmlsZSBvciBhbiBvYmplY3RcbiAgICogb2Yge0BsaW5rIEtleWNsb2FrQ29uZmlnfS4gVXNlIHRoaXMgY29uZmlndXJhdGlvbiBpZiB5b3Ugd2FudCB0byBzcGVjaWZ5IHRoZSBrZXljbG9hayBzZXJ2ZXIsXG4gICAqIHJlYWxtLCBjbGllbnRJZC4gVGhpcyBpcyB1c2VmdWxsIGlmIHlvdSBoYXZlIGRpZmZlcmVudCBjb25maWd1cmF0aW9ucyBmb3IgcHJvZHVjdGlvbiwgc3RhZ2VcbiAgICogYW5kIGRldmVsb3BtZW50IGVudmlyb25tZW50cy4gSGludDogTWFrZSB1c2Ugb2YgQW5ndWxhciBlbnZpcm9ubWVudCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgY29uZmlnPzogc3RyaW5nIHwgS2V5Y2xvYWtDb25maWc7XG4gIC8qKlxuICAgKiBPcHRpb25zIHRvIGluaXRpYWxpemUgdGhlIEtleWNsb2FrIGFkYXB0ZXIsIG1hdGNoZXMgdGhlIG9wdGlvbnMgYXMgcHJvdmlkZWQgYnkgS2V5Y2xvYWsgaXRzZWxmLlxuICAgKi9cbiAgaW5pdE9wdGlvbnM/OiBLZXljbG9hay5LZXljbG9ha0luaXRPcHRpb25zO1xuICAvKipcbiAgICogQnkgZGVmYXVsdCBhbGwgcmVxdWVzdHMgbWFkZSBieSBBbmd1bGFyIEh0dHBDbGllbnQgd2lsbCBiZSBpbnRlcmNlcHRlZCBpbiBvcmRlciB0b1xuICAgKiBhZGQgdGhlIGJlYXJlciBpbiB0aGUgQXV0aG9yaXphdGlvbiBIdHRwIEhlYWRlci4gSG93ZXZlciwgaWYgdGhpcyBpcyBhIG5vdCBkZXNpcmVkXG4gICAqIGZlYXR1cmUsIHRoZSBlbmFibGVCZWFyZXJJbnRlcmNlcHRvciBtdXN0IGJlIGZhbHNlLlxuICAgKlxuICAgKiBCcmllZmx5LCBpZiBlbmFibGVCZWFyZXJJbnRlcmNlcHRvciA9PT0gZmFsc2UsIHRoZSBiZWFyZXIgd2lsbCBub3QgYmUgYWRkZWRcbiAgICogdG8gdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgZW5hYmxlQmVhcmVySW50ZXJjZXB0b3I/OiBib29sZWFuO1xuICAvKipcbiAgICogRm9yY2VzIHRoZSBleGVjdXRpb24gb2YgbG9hZFVzZXJQcm9maWxlIGFmdGVyIHRoZSBrZXljbG9hayBpbml0aWFsaXphdGlvbiBjb25zaWRlcmluZyB0aGF0IHRoZVxuICAgKiB1c2VyIGxvZ2dlZCBpbi5cbiAgICogVGhpcyBvcHRpb24gaXMgcmVjb21tZW5kZWQgaWYgaXMgZGVzaXJhYmxlIHRvIGhhdmUgdGhlIHVzZXIgZGV0YWlscyBhdCB0aGUgYmVnaW5uaW5nLFxuICAgKiBzbyBhZnRlciB0aGUgbG9naW4sIHRoZSBsb2FkVXNlclByb2ZpbGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYW5kIGl0J3MgdmFsdWUgY2FjaGVkLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgbG9hZFVzZXJQcm9maWxlQXRTdGFydFVwPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFN0cmluZyBBcnJheSB0byBleGNsdWRlIHRoZSB1cmxzIHRoYXQgc2hvdWxkIG5vdCBoYXZlIHRoZSBBdXRob3JpemF0aW9uIEhlYWRlciBhdXRvbWF0aWNhbGx5XG4gICAqIGFkZGVkLiBUaGlzIGxpYnJhcnkgbWFrZXMgdXNlIG9mIEFuZ3VsYXIgSHR0cCBJbnRlcmNlcHRvciwgdG8gYXV0b21hdGljYWxseSBhZGQgdGhlIEJlYXJlclxuICAgKiB0b2tlbiB0byB0aGUgcmVxdWVzdC5cbiAgICovXG4gIGJlYXJlckV4Y2x1ZGVkVXJscz86IChzdHJpbmcgfCBFeGNsdWRlZFVybClbXTtcbiAgLyoqXG4gICAqIFRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkIGFzIHRoZSBBdXRob3JpemF0aW9uIEh0dHAgSGVhZGVyIG5hbWUuIFRoZSBkZWZhdWx0IHZhbHVlIGlzXG4gICAqICoqQXV0aG9yaXphdGlvbioqLiBJZiB0aGUgYmFja2VuZCBleHBlY3RzIHJlcXVlc3RzIHRvIGhhdmUgYSB0b2tlbiBpbiBhIGRpZmZlcmVudCBoZWFkZXIsIHlvdVxuICAgKiBzaG91bGQgY2hhbmdlIHRoaXMgdmFsdWUsIGkuZTogKipKV1QtQXV0aG9yaXphdGlvbioqLiBUaGlzIHdpbGwgcmVzdWx0IGluIGEgSHR0cCBIZWFkZXJcbiAgICogQXV0aG9yaXphdGlvbiBhcyBcIkpXVC1BdXRob3JpemF0aW9uOiBiZWFyZXIgPHRva2VuPlwiLlxuICAgKi9cbiAgYXV0aG9yaXphdGlvbkhlYWRlck5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGlzIHZhbHVlIHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIEF1dGhvcml6YXRpb24gSHR0cCBIZWFkZXIgcGFyYW0uIFRoZSBkZWZhdWx0IHZhbHVlIGlzXG4gICAqICoqYmVhcmVyKiosIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgSHR0cCBIZWFkZXIgQXV0aG9yaXphdGlvbiBhcyBcIkF1dGhvcml6YXRpb246IGJlYXJlciA8dG9rZW4+XCIuXG4gICAqIElmIGFueSBvdGhlciB2YWx1ZSBpcyBuZWVkZWQgYnkgdGhlIGJhY2tlbmQgaW4gdGhlIGF1dGhvcml6YXRpb24gaGVhZGVyLCB5b3Ugc2hvdWxkIGNoYW5nZSB0aGlzXG4gICAqIHZhbHVlLCBpLmU6ICoqQmVhcmVyKiouXG4gICAqXG4gICAqIFdhcm5pbmc6IHRoaXMgdmFsdWUgbXVzdCBiZSBpbiBjb21wbGlhbmNlIHdpdGggdGhlIGtleWNsb2FrIHNlcnZlciBpbnN0YW5jZSBhbmQgdGhlIGFkYXB0ZXIuXG4gICAqL1xuICBiZWFyZXJQcmVmaXg/OiBzdHJpbmc7XG59XG4iXX0=